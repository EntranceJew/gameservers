<?php
// $Id$

/**
 * @file
 * Acquire and display information from a variety of game servers.
 */

// ------------------------------------------------------------------
// Drupal hooks
// ------------------------------------------------------------------

/**
 * Implementation of hook_help().
 */
function gameservers_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/help#gameservers':
      $output = '<p>'. t('Acquire and display information from a variety of game servers.') .'</p>';
      break;
    case 'admin/build/gameservers':
      $output = '<p>'. t('Add one or more game server for monitoring. You can view the list from the !server page.', array('!server' => l(t('Game servers'), 'gameservers'))) .'</p>';
      break;
    case 'admin/build/gameservers/add':
      $output = '<p>'. t('Enter the information for your new game server. Remember to enable the newly created block in the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function gameservers_perm() {
  return array(
    'access game servers',
    'administer game servers',
  );
}

/**
 * Implementation of hook_theme()
 */
function gameservers_theme() {

  $theme = array();

  $theme['gameservers_block'] = array(
    'arguments' => array('server' => NULL, 'response' => NULL, 'style' => NULL),
    'path' => gameservers_get_path('templates'),
  );

  // Register layout and style themes on behalf of all of these items.
  $blocks = gameservers_get_blocks();
  foreach ($blocks as $name => $data) {
    if (!empty($data['theme'])) {
      $theme[$data['theme']] = array(
        'arguments' => array('server' => NULL, 'response' => NULL),
        'path' => $data['path'],
      );

      // if no theme function exists, assume template.
      if (!function_exists("theme_$data[theme]")) {
        $theme[$data['theme']]['template'] = str_replace('_', '-', $data['theme']);
        $theme[$data['theme']]['file'] = $data['file']; // for preprocess.
      }
    }
  }

  return $theme;
}

/**
 * Implementation of hook_menu().
 */
function gameservers_menu() {
  $items['gameservers'] = array(
    'title' => 'Game servers',
    'page callback' => 'gameservers_browse',
    'access arguments' => array('access game servers'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'gameservers.pages.inc',
  );
  $items['admin/build/gameservers'] = array(
    'title' => 'Game servers',
    'description' => 'Configure game servers.',
    'page callback' => 'gameservers_admin_overview',
    'access arguments' => array('administer game servers'),
    'file' => 'gameservers.admin.inc',
  );
  $items['admin/build/gameservers/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/gameservers/add'] = array(
    'title' => 'Add game server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gameservers_admin_add_form'),
    'access arguments' => array('administer game servers'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gameservers.admin.inc',
  );
  $items['admin/build/gameservers/edit/%'] = array(
    'title' => 'Edit game server',
    'page callback' => 'gameservers_admin_edit_page',
    'page arguments' => array(4),
    'access arguments' => array('administer game servers'),
    'type' => MENU_CALLBACK,
    'file' => 'gameservers.admin.inc',
  );
  $items['admin/build/gameservers/delete/%'] = array(
    'title' => 'Delete game server',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gameservers_admin_delete_form', 4),
    'access arguments' => array('administer game servers'),
    'type' => MENU_CALLBACK,
    'file' => 'gameservers.admin.inc',
  );
  $items['admin/build/gameservers/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gameservers_admin_configure'),
    'access arguments' => array('administer game servers'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'gameservers.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function gameservers_block($op = 'list', $delta = 0, $edit = array()) {
  gameservers_include('block');
  switch ($op) {
    case 'list':
      return gameservers_block_list();
    case 'configure':
      return gameservers_block_configure($delta);
    case 'save':
      return gameservers_block_save($delta, $edit);
    case 'view':
      return gameservers_block_view($delta);
  }
}

/**
 * Implementation of hook_flush_caches().
 */
function gameservers_flush_caches() {
  return array('gameservers_cache');
}

// ------------------------------------------------------------------
// CTools plugins integration (plugins.inc standalone support)
// ------------------------------------------------------------------

/**
 * Wrapper for ctools_include('plugins').
 */
function gameservers_include_plugins() {
  if (module_exists('ctools')) {
    ctools_include('plugins');
  }
  elseif (!function_exists('ctools_get_plugins')) {
    gameservers_include('plugins');
  }
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function gameservers_ctools_plugin_directory($module, $plugin) {
  if ($module == 'gameservers' && $plugin == 'query') {
    return 'plugins';
  }
  if ($module == 'gameservers' && $plugin == 'blocks') {
    return 'styles';
  }
}

/**
 * Fetch metadata on a specific query_library plugin.
 */
function gameservers_get_query_library($query_library) {
  gameservers_include_plugins();
  return ctools_get_plugins('gameservers', 'query', $query_library);
}

/**
 * Fetch metadata for all query_library plugins.
 */
function gameservers_get_query_libraries() {
  gameservers_include_plugins();
  return ctools_get_plugins('gameservers', 'query');
}

/**
 * Fetch metadata on a specific block plugin.
 */
function gameservers_get_block($block) {
  gameservers_include_plugins();
  return ctools_get_plugins('gameservers', 'blocks', $block);
}

/**
 * Fetch metadata for all block plugins.
 */
function gameservers_get_blocks() {
  gameservers_include_plugins();
  return ctools_get_plugins('gameservers', 'blocks');
}

/**
 * Get an instance of a class for a given plugin and id.
 *
 * @param $plugin
 *   A string that is the key of the plugin to load.
 * @param $id
 *   A string that is the id of the object.
 *
 * @return GameServers_Query
 *   A GameServers_Query object.
 *
 * @throws Exception
 *   If plugin can't be instantiated.
 */
function gameservers_get_query_instance($id) {
  static $instances = array();

  if (!isset($instances[$id])) {
    gameservers_include('gameserver');
    gameservers_include_plugins();

    if ($class = ctools_plugin_load_class('gameservers', 'query', $id, 'handler')) {
      $instances[$id] = new $class();
    }
    else {
      gameservers_fatal_error(t('Missing gameservers query plugin. Check whether all required libraries are installed properly.'));
      exit();
    }
  }

  return $instances[$id];
}

// ------------------------------------------------------------------
// Server CRUD functions
// ------------------------------------------------------------------

/**
 * Load a game server object from the database.
 */
function gameservers_server_load($id, $reset = FALSE) {
  static $servers = array();

  if ($reset) {
    $servers = array();
  }

  if (isset($servers[$id])) {
    return drupal_clone($servers[$id]);
  }

  $server = db_fetch_object(db_query('SELECT * FROM {gameservers_server} WHERE id = %d', $id));
  if ($server && $server->id) {
    $server->config = unserialize($server->config);
    $servers[$server->id] = drupal_clone($server);
  }

  return $server;
}

/**
 * Save game server object to the database.
 */
function gameservers_server_save($server) {
  if (empty($server->id)) {
    return drupal_write_record('gameservers_server', $server);
  }
  return drupal_write_record('gameservers_server', $server, 'id');
}

/**
 * Delete a game server.
 */
function gameservers_server_delete($id) {
  if ($server = gameservers_server_load($id)) {
    db_query("DELETE FROM {blocks} WHERE module = 'gameservers' AND delta = %d", $server->id);
    db_query('DELETE FROM {gameservers_server} WHERE id = %d', $server->id);

    // Clear the page and block caches.
    cache_clear_all();

    //drupal_set_message(t('Game server %name has been deleted.', array('%name' => $server->name)));
  }
}

/**
 * Generate a display of the query response to given game server.
 *
 * @param $server
 *   A game server object.
 * @param $block
 *   Whether the game server is being displayed in a block.
 * @param $page
 *   Whether the game server is being displayed by itself as a page.
 *
 * @return
 *   An HTML representation of the themed game server.
 */
function gameservers_server_view($server, $block = FALSE, $page = FALSE) {
  if (!$server->status) {
    return;
  }

  $config = $server->config;
  $query = gameservers_get_query_instance($config['query']['plugin']);
  if ($reponse = $query->getResponse($server)) {
    $reponse = (object) $reponse;
  }

  if ($block) {
    $theme_hook = 'gameservers_block';
    $style = gameservers_get_block($config['blocks']['plugin']);
  }
  else {
    $theme_hook = 'gameservers_page_details';
  }

  return theme($theme_hook, $server, $reponse, $style);
}

// ------------------------------------------------------------------
// Helper functions
// ------------------------------------------------------------------

/**
 * Load a gameservers include file.
 *
 * @see module_load_include()
 */
function gameservers_include($include, $path = 'includes/') {
  static $loaded = array();
  if (empty($loaded["$path$include.inc"])) {
    require_once './' . gameservers_get_path("$path$include.inc");
    $loaded["$path$include.inc"] = TRUE;
  }
}

/**
 * Returns the path to a gameservers module file.
 *
 * @see drupal_get_path()
 */
function gameservers_get_path($file, $base_path = FALSE, $module = 'gameservers') {
  $output = $base_path ? base_path() : '';
  return $output . drupal_get_path('module', $module) . '/' . $file;
}

/**
 * Returns the path to library.
 *
 * @see libraries_get_path().
 */
function gameservers_get_path_library($library) {
  if (module_exists('libraries') && file_exists(libraries_get_path($library))) {
    return libraries_get_path($library);
  }
  else {
    return gameservers_get_path("/libraries/$library");
  }
}

/**
 * Includes a library file.
 *
 * @param $file
 *   The filename to load from.
 * @param $library
 *   The name of the library. If libraries module is installed,
 *   gameservers_include_library() will look for libraries with this name
 *   managed by libraries module.
 */
function gameservers_include_library($file, $library) {
  static $included = array();
  if (!isset($included[$library][$file])) {
    // Try first whether libraries module is present and load the file from
    // there. If this fails, require the library from the local path.
    if (module_exists('libraries') && file_exists(libraries_get_path($library) ."/$file")) {
      require libraries_get_path($library) ."/$file";
    }
    else {
      require './'. drupal_get_path('module', 'gameservers') ."/libraries/$library/$file";
    }
  }
  $included[$library][$file] = TRUE;
}

/**
 * Generates a 500 internal server error.
 */
function gameservers_fatal_error($error_msg = NULL) {
  drupal_set_header('HTTP/1.1 500 Internal Server Error');
  drupal_set_title(t('Fatal error'));
  if ($error_msg) {
    drupal_set_message($error_msg, 'error');
  }
  print theme('page', t('The website encountered an unexpected error. Please try again later.'));
}

function theme_gameservers_block($server, $response, $style = NULL) {
  if (isset($style['css'])) {
    drupal_add_css($style['path'] . '/'. $style['css'], 'module');
  }
  $theme = isset($style['theme']) ? $style['theme'] : 'gameservers_default';
  return theme($theme, $server, $response);
}
